
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.1.0.96

// ldbanno -n Verilog -o Lab4_SmartTekbotRemote_Lab4_SmartTekbotRemote_vo.vo -w -neg -gui Lab4_SmartTekbotRemote_Lab4_SmartTekbotRemote.ncd 
// Netlist created on Tue May 13 00:09:46 2014
// Netlist written on Tue May 13 00:10:02 2014
// Design is for device LCMXO2-7000HE
// Design is for package TQFP144
// Design is for performance grade 4

`timescale 1 ns / 1 ps

module Lab2_TekbotRemote_schematic ( A, B, C, Ld, Le, Rd, Re );
  input  A, B, C;
  output Ld, Le, Rd, Re;
  wire   A_c, C_c, B_c, Ld_c, Re_c, Rd_c, Le_c, VCCI;

  SLICE_0 SLICE_0( .D1(A_c), .C1(C_c), .A1(B_c), .D0(A_c), .C0(C_c), .A0(B_c), 
    .F0(Ld_c), .F1(Re_c));
  SLICE_1 SLICE_1( .D1(B_c), .C1(A_c), .B1(C_c), .C0(C_c), .F0(Rd_c), 
    .F1(Le_c));
  C C_I( .PADDI(C_c), .C(C));
  B B_I( .PADDI(B_c), .B(B));
  A A_I( .PADDI(A_c), .A(A));
  Re Re_I( .PADDO(Re_c), .Re(Re));
  Rd Rd_I( .PADDO(Rd_c), .Rd(Rd));
  Le Le_I( .PADDO(Le_c), .Le(Le));
  Ld Ld_I( .PADDO(Ld_c), .Ld(Ld));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
  GSR GSR_INST( .GSR(VCCI));
endmodule

module SLICE_0 ( input D1, C1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut4 I24( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40001 I13( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module lut40001 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_1 ( input D1, C1, B1, C0, output F0, F1 );
  wire   GNDI;

  lut40002 I23( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40003 I20( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40002 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40003 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module C ( output PADDI, input C );

  xo2iobuf C_pad( .Z(PADDI), .PAD(C));

  specify
    (C => PADDI) = (0:0:0,0:0:0);
    $width (posedge C, 0:0:0);
    $width (negedge C, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module B ( output PADDI, input B );

  xo2iobuf B_pad( .Z(PADDI), .PAD(B));

  specify
    (B => PADDI) = (0:0:0,0:0:0);
    $width (posedge B, 0:0:0);
    $width (negedge B, 0:0:0);
  endspecify

endmodule

module A ( output PADDI, input A );

  xo2iobuf A_pad( .Z(PADDI), .PAD(A));

  specify
    (A => PADDI) = (0:0:0,0:0:0);
    $width (posedge A, 0:0:0);
    $width (negedge A, 0:0:0);
  endspecify

endmodule

module Re ( input PADDO, output Re );
  wire   GNDI;

  xo2iobuf0004 Re_pad( .I(PADDO), .T(GNDI), .PAD(Re));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => Re) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0004 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module Rd ( input PADDO, output Rd );
  wire   GNDI;

  xo2iobuf0004 Rd_pad( .I(PADDO), .T(GNDI), .PAD(Rd));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => Rd) = (0:0:0,0:0:0);
  endspecify

endmodule

module Le ( input PADDO, output Le );
  wire   GNDI;

  xo2iobuf0004 Le_pad( .I(PADDO), .T(GNDI), .PAD(Le));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => Le) = (0:0:0,0:0:0);
  endspecify

endmodule

module Ld ( input PADDO, output Ld );
  wire   GNDI;

  xo2iobuf0004 Ld_pad( .I(PADDO), .T(GNDI), .PAD(Ld));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => Ld) = (0:0:0,0:0:0);
  endspecify

endmodule
